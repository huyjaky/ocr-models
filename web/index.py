import streamlit as st
import requests
import re
import json
from table import (
    render_vertical_table,
    render_horizontal_table,
    title,
    title_small,
    format_time,
    group_by_type,
)


def get_url(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()


# File uploader
uploaded_file = st.file_uploader("Ch·ªçn t·ªáp PDF", type="pdf")

if uploaded_file is not None:
    # save to local
    with open(
        "./cache/pdf_cached.pdf",
        "wb",
    ) as f:
        f.write(uploaded_file.getbuffer())
    st.success("T·ªáp PDF ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng!")

    with st.spinner("üîÑ We are converting your PDF to JSON..."):
        # Call API to convert PDF to Markdown
        converted = get_url("http://localhost:8052/convertPDF2MD")
        extracted_md = get_url("http://localhost:8053/extracted")
        st.success("‚úÖ Done")
        cleaned_text = re.sub(
            r"^.*?<start_of_turn>model\n",
            "",
            extracted_md["response"][0],
            flags=re.DOTALL,
        )

        # Round error handling
        if "QuyenTaiSan" in cleaned_text and "TaiSan_QuyenTaiSan" not in cleaned_text:
            cleaned_text = cleaned_text.replace("QuyenTaiSan", "TaiSan_QuyenTaiSan")

        st.json(cleaned_text.replace("<end_of_turn>", ""))
        form_schema = json.loads(cleaned_text.replace("<end_of_turn>", ""))

        lable_map_bengiao = {
            "1": "C√¥ng d√¢n Vi·ªát Nam",
            "2": "T·ªï ch·ª©c c√≥ ƒëƒÉng k√Ω kinh doanh trong n∆∞·ªõc",
            "3": "Ng∆∞·ªùi n∆∞·ªõc ngo√†i",
            "4": "Nh√† ƒë·∫ßu t∆∞ n∆∞·ªõc ngo√†i",
            "5": "T·ªï ch·ª©c kh√°c",
            "6": "Ng∆∞·ªùi kh√¥ng qu·ªëc t·ªãch c∆∞ tr√∫ t·∫°i Vi·ªát Nam",
        }

        lable_map_taisan = {
            "TaiSan_CoSoKhung": "T√†i s·∫£n c√≥ s·ªë khung",
            "TaiSan_KhongCoSoKhung": "T√†i s·∫£n kh√¥ng c√≥ s·ªë khung",
            "TaiSan_QuyenTaiSan": "Quy·ªÅn t√†i s·∫£n",
            "TaiSan_HangHoaLuanChuyen": "H√†ng h√≥a lu√¢n chuy·ªÉn",
        }

        label_map_value = {
            # TaiSan_CoSoKhung
            "PhuongTien": "Ph∆∞∆°ng ti·ªán",
            "NhanHieuMauSon": "Nh√£n hi·ªáu m√†u s∆°n",
            "SoKhung": "S·ªë khung",
            "SoMay": "S·ªë m√°y",
            "BienSo": "Bi·ªÉn s·ªë",
            # TaiSan_KhongCoSoKhung
            "TenPhuongTienNhanHieu": "T√™n ph∆∞∆°ng ti·ªán, nh√£n hi·ªáu",
            "TenChuPhuongTien": "T√™n ch·ªß ph∆∞∆°ng ti·ªán",
            "SoDangKyCoQuanCC": "S√¥ ƒëƒÉng k√Ω c∆° quan cc",
            "CapPhuongTien": "C·∫•p ph∆∞∆°ng ti·ªán",
            # TaiSan_QuyenTaiSan
            "CanCuThayDoi": "CƒÉn c·ª© thay ƒë·ªïi",
            "TenQuyen": "T√™n quy·ªÅn",
            "CanCuPhatSinhQuyen": "CƒÉn c·ª© ph√°t sinh quy·ªÅn",
            # TaiSan_HangHoaLuanChuyen
            "LoaiKhoHang": "Lo·∫°i kho h√†ng",
            "GiaTri_TenLoai_HangHoa": "Gi√° tr·ªã, t√™n lo·∫°i h√†ng h√≥a",
            "DiaChiKhoHang": "ƒê·ªãa ch·ªâ kho h√†ng",
            "SoHieuKhoHang": "S·ªë hi·ªáu kho h√†ng",
            # CongDanVietNam
            "HoTen": "H·ªç t√™n",
            "CCCD": "CƒÉng c∆∞·ªõc c√¥ng d√¢n",
            "DiaChi": "ƒê·ªãa ch·ªâ",
            # ToChucTrongNuoc
            "TenToChuc": "T√™n t·ªï ch·ª©c",
            "MaSoThue": "M√£ s·ªë thu·∫ø",
            # NguoiNuocNgoai
            "SoHoChieu": "S·ªë h·ªô chi·∫øu",
            "QuocGiaCap": "Qu·ªëc gia l·∫≠p",
            "QuocGia": "Qu·ªëc gia",
            "Tinh": "T·ªânh",
            # NhaDauTuNuocNgoai
            "MaSoThue": "M√£ s·ªë thu·∫ø",
            "Ten": "T√™n",
            # ToChucKhac
            # NguoiKhongQuocTich
            "TheCuTru": "Th·∫ª c∆∞ tr√∫",
        }

        title("Th√¥ng tin tr√≠ch xu·∫•t")

        render_horizontal_table(
            ["M√£ h·ªì s∆°", "S·ªë ƒëƒÉng k√Ω", "Th·ªùi ƒëi·ªÉm ƒëƒÉng k√Ω"],
            [
                [
                    form_schema["MaHoSo"],
                    form_schema["SoDon"],
                    format_time(form_schema["ThoiDiemDangKy"]),
                ]
            ],
        )

        render_horizontal_table(
            ["S·ªë ƒëƒÉng k√Ω l·∫ßn ƒë·∫ßu", "Th·ªùi ƒëi·ªÉm ƒëƒÉng k√Ω l·∫ßn ƒë·∫ßu"],
            [
                [
                    form_schema["SoDangKyLanDau"],
                    format_time(form_schema["ThoiDiemDKLanDau"]),
                ]
            ],
        )

        render_vertical_table(
            [
                ["Lo·∫°i ƒë∆°n", form_schema["LoaiDonName"]],
                ["Lo·∫°i h√¨nh giao d·ªãch", form_schema["LoaiHinhGDName"]],
                ["Lo·∫°i bi·ªán ph√°p", form_schema["LoaBienPhapName"]],
                ["Lo·∫°i h·ª£p ƒë·ªìng", form_schema["LoaHopDongName"]],
            ],
        )

        render_horizontal_table(
            ["S·ªë h·ª£p ƒë·ªìng", "S·ªë ph·ª• l·ª•c h·ª£p ƒë·ªìng", "Ng√†y hi·ªáu l·ª±c"],
            [
                [
                    form_schema["SoHopDong"],
                    form_schema["SoPhuLuc"],
                    form_schema["NgayCoHieuLucHopDong"],
                ]
            ],
        )

        render_horizontal_table(
            ["N·ªôi dung thay ƒë·ªïi ƒëƒÉng k√Ω"], [[form_schema["NoiDungThayDoi"]]]
        )

        render_horizontal_table(
            ["M√¥ t·∫£ chung v·ªÅ t√†i s·∫£n"], [[form_schema["MoTaChungTaiSan"]]]
        )

        title("B√™n giao")

        bengiao = group_by_type(form_schema["BenGiao"], "LoaiChuTheID")
        for loai_id in sorted(bengiao.keys()):
            danh_sach = bengiao[loai_id]
            title_small(lable_map_bengiao[f"{loai_id}"])
            for i, obj in enumerate(danh_sach, 1):
                chu_the = obj["ThongTinChuThe"]
                rows = [[k, v] for k, v in chu_the.items()]
                rows = [[label_map_value.get(k, k), v] for k, v in rows]
                render_vertical_table(rows)

        title("B√™n nh·∫≠n")
        bennhan = form_schema["BenNhan"][0]
        render_vertical_table(
            [
                ["T√™n", bennhan["Ten"]],
                ["Qu·ªëc gia", bennhan["QuocGia"]],
                ["T·ªânh", bennhan["Tinh"]],
                ["ƒê·ªãa ch·ªâ", bennhan["DiaChi"]],
            ],
        )

        title("T√†i s·∫£n")

        exclude_taisan_keys = ["LoaiTaiSan", "CanCuThayDoi"]
        taisan = group_by_type(form_schema["TaiSan"], "LoaiTaiSan")
        for loai_id in sorted(taisan.keys()):
            danh_sach = taisan[loai_id]

            title_small(lable_map_taisan[f"{loai_id}"])

            for i, obj in enumerate(danh_sach, 1):
                rows = [[k, v] for k, v in obj.items() if k not in exclude_taisan_keys]
                rows = [
                    [
                        k,
                        (
                            {0: "H√†ng ho√° lu√¢n chuy·ªÉn", 1: "Kho h√†ng"}.get(v, v)
                            if k == "LoaiKhoHang"
                            else v
                        ),
                    ]
                    for k, v in rows
                ]
                rows = [
                    [
                        k,
                        (
                            {1: "Th·∫ø ch·∫•p/C·∫ßm c·ªë", 2: "X√≥a th·∫ø ch·∫•p/C·∫ßm c·ªë"}.get(v, v)
                            if k == "CanCuThayDoi"
                            else v
                        ),
                    ]
                    for k, v in rows
                ]
                rows = [[label_map_value.get(k, k), v] for k, v in rows]
                render_vertical_table(rows)
